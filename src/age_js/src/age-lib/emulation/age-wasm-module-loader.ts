//
// Copyright 2018 Christoph Sprenger
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import {HttpClient} from "@angular/common/http";
import {combineLatest, from, Observable, of} from "rxjs";
import {map, shareReplay, switchMap} from "rxjs/operators";
import {AgeTaskStatusHandler} from "./age-task-status-handler";
import {IAgeGbEmulatorModule} from "./age-wasm-module";


export class AgeWasmModuleLoader {

    // tslint:disable-next-line:no-any
    private readonly _javaScript$: Observable<any>;
    private readonly _wasmBinary$: Observable<ArrayBuffer>;

    constructor(httpClient: HttpClient) {
        // tslint:disable-next-line:no-any
        const javaScript$ = from(import(/* webpackIgnore: true */ "./assets/age_wasm.js" as any));
        const wasmBinary$ = httpClient.get("assets/age_wasm.wasm", {responseType: "arraybuffer"});

        // For each file to be loaded:
        //      Share a single subscription and cache the loaded file
        //      (making this a hot observable).
        //      On error all observers are unsubscribed and the next observer
        //      restarts the operation.
        this._javaScript$ = javaScript$.pipe(shareReplay(1));
        this._wasmBinary$ = wasmBinary$.pipe(shareReplay(1));
    }

    newWasmModule$(taskStatusHandler: AgeTaskStatusHandler): Observable<IAgeGbEmulatorModule> {
        return of(true).pipe(
            // We rely on dynamic imports to lazy load the Code generated by emscripten.
            // "webpackIgnore" is used to trigger a dynamic import and prevent webpack
            // from creating a chunk for the JavaScript Code during bundling
            // (which requires the file to exist,
            // which in turn requires the age-wasm build to be finished,
            // which in turn means we cannot parallelize the age-wasm and the age-js build jobs).
            //
            // One should obviously not activate the TypeScript Compiler option "removeComments"
            // since this will break webpack Magic Comments.
            switchMap(() => combineLatest([
                // TODO if the dynamic import observable is cancelled by failing to load the WASM binary,
                //      strange things happen ...
                taskStatusHandler.addTask$("loading WASM JavaScript", this._javaScript$),
                taskStatusHandler.addTask$("loading WASM binary", this._wasmBinary$),
            ])),

            // Once the JavaScript and WASM Code has been loaded,
            // instantiate a new WASM module.
            switchMap(values => {
                let wasmModule: IAgeGbEmulatorModule | undefined;
                const wasmModulePromise = new Promise((resolve, reject) => {
                    wasmModule = values[0].default({
                        wasmBinary: new Uint8Array(values[1]),
                        onAbort: reject,
                        // the current Module generated by emscripten does not always play nice
                        // with promises so that we cannot use it as resolve-value
                        // (see https://github.com/emscripten-core/emscripten/issues/5820)
                        onRuntimeInitialized: resolve,
                    });
                });
                return taskStatusHandler.addTask$(
                    "initializing WASM binary",
                    from(wasmModulePromise).pipe(
                        map(() => {
                            if (!wasmModule) {
                                throw new Error("WASM Module not initialized");
                            }
                            return wasmModule;
                        }),
                    ),
                );
            }),

            // pipe() ends
        );
    }
}
