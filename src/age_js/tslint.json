{
    // tslint:recommended can be found at:
    // https://github.com/palantir/tslint/blob/master/src/configs/recommended.ts
    "extends": "tslint:recommended",
    "rulesDirectory": [
        "codelyzer",
        "rxjs-tslint"
    ],
    "rules": {
        // use parenthesis around arrow function parameters (not for a single parameter though)
        //  -> https://palantir.github.io/tslint/rules/arrow-parens
        "arrow-parens": [
            true,
            "ban-single-arg-parens"
        ],
        // don't await a non-promise
        //  -> https://palantir.github.io/tslint/rules/await-promise
        "await-promise": true,
        // deprecated code is not allowed
        //  -> https://palantir.github.io/tslint/rules/deprecation
        "deprecation": true,
        // always use UTF-8
        //  -> https://palantir.github.io/tslint/rules/encoding
        "encoding": true,
        // four-space-indentation
        //  -> https://palantir.github.io/tslint/rules/indent
        "indent": [
            true,
            "spaces",
            4
        ],
        // TODO remove, use default instead
        "interface-name": false,
        // don't limit the number of classes per file
        // (override tslint:recommended)
        //  -> https://palantir.github.io/tslint/rules/max-classes-per-file
        "max-classes-per-file": false,
        // limit the max line length
        //  -> https://palantir.github.io/tslint/rules/max-line-length
        "max-line-length": [
            true,
            140
        ],
        // don't explicitly specify "public" accessibility, because it's the default
        //  -> https://palantir.github.io/tslint/rules/member-access
        "member-access": [
            true,
            "no-public"
        ],
        // no "any" as type declaration
        //  -> https://palantir.github.io/tslint/rules/no-any
        "no-any": true,
        // use "if (x)" instead of "if (x === true)"
        //  -> https://palantir.github.io/tslint/rules/no-boolean-literal-compare
        "no-boolean-literal-compare": true,
        // don't limit the number of consecutive blank lines
        // (override tslint:recommended)
        //  -> https://palantir.github.io/tslint/rules/no-consecutive-blank-lines
        "no-consecutive-blank-lines": false,
        // TODO remove, use default instead
        "no-console": false,
        // prevent multiple import statements from the same module for the sake of readability
        //  -> https://palantir.github.io/tslint/rules/no-duplicate-imports
        "no-duplicate-imports": true,
        // no duplicate cases in a switch
        //  -> https://palantir.github.io/tslint/rules/no-duplicate-switch-case
        "no-duplicate-switch-case": true,
        // no duplicate variables in the same scope
        //  -> https://palantir.github.io/tslint/rules/no-duplicate-variable
        "no-duplicate-variable": [
            true,
            "check-parameters"
        ],
        // don't delete dynamically computed keys (dangerous and not optimized)
        //  -> https://palantir.github.io/tslint/rules/no-dynamic-delete
        "no-dynamic-delete": true,
        // don't import modules that are not listed as dependency in package.json
        //  -> https://palantir.github.io/tslint/rules/no-implicit-dependencies
        "no-implicit-dependencies": true,
        // no imports with side effects
        //  -> https://palantir.github.io/tslint/rules/no-import-side-effect
        "no-import-side-effect": true,
        // no explicit type declaration of number, string and boolean variables/parameters
        //  -> https://palantir.github.io/tslint/rules/no-inferrable-types
        "no-inferrable-types": true,
        // use "${" only in template string
        //  -> https://palantir.github.io/tslint/rules/no-invalid-template-strings
        "no-invalid-template-strings": true,
        // no irregular white spaces (e.g. tabs [0x0B] or form feeds [0x0C])
        //  -> https://palantir.github.io/tslint/rules/no-irregular-whitespace
        "no-irregular-whitespace": true,
        // no non-null assertions using the ! postfix operator as it cancels the benefits of strict null checking
        //  -> https://palantir.github.io/tslint/rules/no-non-null-assertion
        "no-non-null-assertion": true,
        // prefer "const x: T = { ... }" over "const x = { ... } as T"
        //  -> https://palantir.github.io/tslint/rules/no-object-literal-type-assertion
        "no-object-literal-type-assertion": true,
        // no JSDoc which duplicates TypeScript functionality
        //  -> https://palantir.github.io/tslint/rules/no-redundant-jsdoc
        "no-redundant-jsdoc": true,
        // no "return await" in async functions
        //  -> https://palantir.github.io/tslint/rules/no-return-await
        "no-return-await": true,
        // array literals must not contain missing elements (may be an accidentally duplicated comma)
        //  -> https://palantir.github.io/tslint/rules/no-sparse-arrays
        "no-sparse-arrays": true,
        // no implicit falling through case statements (allows explicit falling through via "/* falls through */")
        //  -> https://palantir.github.io/tslint/rules/no-switch-case-fall-through
        "no-switch-case-fall-through": true,
        //  -> https://palantir.github.io/tslint/rules/no-this-assignment
        "no-this-assignment": true,
        // replace "x => f(x)" with "f"
        //  -> https://palantir.github.io/tslint/rules/no-unnecessary-callback-wrapper
        "no-unnecessary-callback-wrapper": true,
        // TODO not displayed by WebStorm
        //  -> https://palantir.github.io/tslint/rules/no-unsafe-any
        //"no-unsafe-any": true,

        // no sorting required for keys in object literals
        // (overrides tslint:recommended)
        //  -> https://palantir.github.io/tslint/rules/object-literal-sort-keys
        "object-literal-sort-keys": false,
        // (override tslint:recommended)
        //  -> https://palantir.github.io/tslint/rules/one-line
        "one-line": false,
        // TODO remove, use default instead
        "ordered-imports": false,
        // if possible, use conditional expression instead of several if-branches
        //  -> https://palantir.github.io/tslint/rules/prefer-conditional-expression
        "prefer-conditional-expression": true,
        // prefer "foo(): void" over "foo: () => void"
        //  -> https://palantir.github.io/tslint/rules/prefer-method-signature
        "prefer-method-signature": true,
        // use ES2015 object spread operator instead of "Object.assign()" for better type checking
        //  -> https://palantir.github.io/tslint/rules/prefer-object-spread
        "prefer-object-spread": true,
        // TODO marking private variables as "readonly" collides with Angular's injection
        //  -> https://palantir.github.io/tslint/rules/prefer-readonly
        //"prefer-readonly": true,

        // use single quotation marks, allow double quotation marks only if it prevents escaping
        //  -> https://palantir.github.io/tslint/rules/quotemark
        "quotemark": [
            true,
            "single",
            "avoid-escape"
        ],
        // prefer "return undefined" over "return" in value-returning functions
        //  -> https://palantir.github.io/tslint/rules/return-undefined
        "return-undefined": true,
        // TODO not displayed by WebStorm
        //  -> https://palantir.github.io/tslint/rules/restrict-plus-operands
        //"restrict-plus-operands": true,

        //  -> https://palantir.github.io/tslint/rules/space-within-parens
        "space-within-parens": [
            true,
            0
        ],
        // the final clause of a "switch" ends wioth a "break"
        //  -> https://palantir.github.io/tslint/rules/switch-final-break
        "switch-final-break": [
            true,
            "always"
        ],
        // TODO remove, use default instead
        "trailing-comma": false,
        //  -> https://palantir.github.io/tslint/rules/use-default-type-parameter
        "use-default-type-parameter": true,
        // variable name rules:
        //  * no keywords
        //  * lowerCamelCase or PascalCase
        //  * a leading "_" is allowed
        //  -> https://palantir.github.io/tslint/rules/variable-name
        "variable-name": [
            true,
            "ban-keywords",
            "check-format",
            "allow-leading-underscore",
            "allow-pascal-case"
        ],
        //
        //  -------------------------
        //  CODELYZER RULES (ANGULAR)
        //  -------------------------
        //

        // formatting for angular expressions
        //  -> http://codelyzer.com/rules/angular-whitespace
        "angular-whitespace": true,
        // ensure correct two-way data binding "[(...)]" stattfinden.
        //  -> http://codelyzer.com/rules/banana-in-box
        "banana-in-box": true,
        // allowed suffixes for components
        //  -> http://codelyzer.com/rules/component-class-suffix
        "component-class-suffix": [
            true,
            "Component",
            "View"
        ],
        // naming rules for component selectors
        //  -> http://codelyzer.com/rules/component-selector
        "component-selector": [
            true,
            // components are HTML elements
            "element",
            // prefix
            "age",
            // case
            "kebab-case"
        ],
        // some life cycle methods can be used only by certain classes
        //  -> http://codelyzer.com/rules/contextual-life-cycle
        "contextual-life-cycle": true,
        // some decorators can be used only by certain classes
        //  -> http://codelyzer.com/rules/decorator-not-allowed
        "decorator-not-allowed": true,
        // mandatory suffix for all directives
        //  -> http://codelyzer.com/rules/directive-class-suffix
        "directive-class-suffix": [
            true,
            "Directive"
        ],
        // naming rules for directive selectors
        //  -> http://codelyzer.com/rules/directive-selector
        "directive-selector": [
            true,
            // directives are HTML attributes
            "attribute",
            // prefix
            "age",
            // case
            "camelCase"
        ],
        // make component selectors mandatory
        // (the DOM can be hard to debug with a lot of autogenerated "ng-component" tags)
        "enforce-component-selector": true,
        // TODO not displayed by WebStorm
        // ensure i18n best practices
        //  -> http://codelyzer.com/rules/i18n
        //"i18n": [
        //    true,
        //    // every HTML element containing text should have an i18n attribute
        //    "check-text"
        //],

        // no whitespaces for imports
        //  -> http://codelyzer.com/rules/import-destructuring-spacing
        //"import-destructuring-spacing": true,

        // use @Input instead of @Attribute
        //  -> http://codelyzer.com/rules/no-attribute-parameter-decorator
        "no-attribute-parameter-decorator": true,
        // don't implement OnChanges and DoCheck on the same class
        //  -> https://angular.io/api/core/DoCheck#description
        "no-conflicting-life-cycle-hooks": true,
        // no forward references for DI
        //  -> http://codelyzer.com/rules/no-forward-ref
        "no-forward-ref": true,
        // no @Input renaming for directives
        //  -> http://codelyzer.com/rules/no-input-rename
        "no-input-rename": true,
        // no explicit calls to lifecycle hooks as such calls can be confusing to debug
        //  -> https://gitter.im/angular/angular?at=59daa728f7299e8f53c2c4f3
        "no-life-cycle-call": true,
        // don't name an @Output after a standard DOM event
        //  -> http://codelyzer.com/rules/no-output-named-after-standard-event
        "no-output-named-after-standard-event": true,
        // no "on" prefix for events
        //  -> http://codelyzer.com/rules/no-output-on-prefix
        "no-output-on-prefix": true,
        // no @Output renaming for directives
        //  -> http://codelyzer.com/rules/no-output-rename
        "no-output-rename": true,
        // no unused CSS in a component's style sheet
        //  -> http://codelyzer.com/rules/no-unused-css
        "no-unused-css": true,
        // use @ContentChild, @ViewChild, etc. instead of queries property
        "no-queries-parameter": true,
        // no impure pipes as they don't perform well
        //  -> http://codelyzer.com/rules/pipe-impure
        "pipe-impure": true,
        // we don't have any pipe naming rules at this time
        //  -> http://codelyzer.com/rules/pipe-naming
        //"pipe-naming" : true,

        // put decorators on the same line as the property/method being decorated
        //  -> https://angular.io/guide/styleguide#style-05-12
        "prefer-inline-decorator": true,
        // @Outputs (Angular EventEmitters) should be readonly to prevent accidental reassignment
        "prefer-output-readonly": true,
        // use strict equality for evaluating async pipe output,
        // as an async pipe evaluates to null before the first emit
        //  -> http://codelyzer.com/rules/templates-no-negated-async
        "templates-no-negated-async": true,
        // use trackBy as it's considered best practice
        //  -> http://codelyzer.com/rules/trackBy-function
        "trackBy-function": true,
        // use @HostProperty instead of the "host" property of @Component and @Directive metadata
        //  -> http://codelyzer.com/rules/use-host-property-decorator
        "use-host-property-decorator": true,
        // use @Input instead of the "inputs" property of @Component and @Directive metadata
        //  -> http://codelyzer.com/rules/use-input-property-decorator
        "use-input-property-decorator": true,
        // implement lifecycle interfaces if you use them
        //  -> http://codelyzer.com/rules/use-life-cycle-interface
        "use-life-cycle-interface": true,
        // use @Output instead of the "outputs" property of @Component and @Directive metadata
        //  -> http://codelyzer.com/rules/use-output-property-decorator
        "use-output-property-decorator": true,
        // use the @Pipe decorator when implementing the PipeTransform interface
        //  -> http://codelyzer.com/rules/use-pipe-decorator
        "use-pipe-decorator": true,
        // pipes implement the PipeTransform interface
        //  -> http://codelyzer.com/rules/use-pipe-transform-interface
        "use-pipe-transform-interface": true,
        // don't use ViewEncapsulation.NONE
        //  -> http://codelyzer.com/rules/use-view-encapsulation
        "use-view-encapsulation": true,
        //
        //  ----------
        //  RXJS RULES
        //  ----------
        //
        //  see also:
        //  https://github.com/reactivex/rxjs-tslint#rules
        //

        // collapse multiple RxJS imports into a single one
        "rxjs-collapse-imports": true,
        // use pipeable operators instead of side-effect operators
        "rxjs-pipeable-operators-only": true,
        // don't use static observable methods
        "rxjs-no-static-observable-methods": true,
        // use RxJS 6.0 imports instead of RxJS 5.x imports
        "rxjs-proper-imports": true
    }
}
