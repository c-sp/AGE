name: AGE CI

on: push

env:
  ARTIFACT_NAME: age-artifacts
  ARTIFACT_PATH: build/artifacts

jobs:

  # we use Ubuntu-20.04 for Qt5.12 support


  ###############################################################################
  ##
  ##   build
  ##
  ###############################################################################

  build-qt:
    name: build Qt applications
    runs-on: ubuntu-20.04
    steps:
      # https://github.com/jurplel/install-qt-action
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-QtCache

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: checkout code
        uses: actions/checkout@v2

      - name: build AGE
        run: build/age_ci.sh qt release

      - name: upload Qt artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}


  build-wasm:
    name: build WebAssembly binaries
    runs-on: ubuntu-20.04
    container:
      image: trzeci/emscripten:1.39.17-upstream
    steps:
      - name: checkout code
        uses: actions/checkout@v2

      - name: build binaries
        run: build/age_ci.sh wasm Release

      - name: upload WebAssembly artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}


  build-js:
    name: build Web App
    runs-on: ubuntu-20.04
    steps:
      - name: checkout code
        uses: actions/checkout@v2

      - name: npm cache
        id: cache-npm
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('src/age_js/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: build Web App
        run: build/age_ci.sh js build --progress=false --base-href /AGE/

      - name: upload JavaScript artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}


  ###############################################################################
  ##
  ##   test
  ##
  ###############################################################################

  test-blargg:
    name: run Blargg's test suite
    runs-on: ubuntu-20.04
    needs: [build-qt]
    steps:
      - name: install Qt libraries
        run: |
          sudo apt-get update
          sudo apt-get install libqt5core5a libqt5gui5

      - name: checkout code
        uses: actions/checkout@v2

      - name: download artifacts
        uses: actions/download-artifact@v1
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}

      - name: run tests
        run: build/age_ci.sh test blargg


  test-gambatte:
    name: run Gambatte test suite
    runs-on: ubuntu-20.04
    needs: [build-qt]
    steps:
      - name: install Qt libraries
        run: |
          sudo apt-get update
          sudo apt-get install libqt5core5a libqt5gui5

      - name: checkout code
        uses: actions/checkout@v2

      - name: download artifacts
        uses: actions/download-artifact@v1
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}

      - name: run tests
        run: build/age_ci.sh test gambatte


  test-mooneye-gb:
    name: run Mooneye GB test suite
    runs-on: ubuntu-20.04
    needs: [build-qt]
    steps:
      - name: install Qt libraries
        run: |
          sudo apt-get update
          sudo apt-get install libqt5core5a libqt5gui5

      - name: checkout code
        uses: actions/checkout@v2

      - name: download artifacts
        uses: actions/download-artifact@v1
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}

      - name: run tests
        run: build/age_ci.sh test mooneye-gb
