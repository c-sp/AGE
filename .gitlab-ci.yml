image: registry.gitlab.com/csprenger/docker-age-ci:latest

stages:
    - build
    - test

variables:
    ARTIFACTS: build/artifacts
    CI_ARTIFACTS: build/ci_artifacts



############################################################
##
##   artifacts
##
############################################################

# Build artifacts are ignored by git (as they are part of .gitignore).
# Unfortunately because of that they cannot be used as GitLab CI artifacts.
#
# The current (non-invasive) solution is to temporarily move build artifacts
# to another directory after job execution in order to pass them to other stages
# and move them back to their original position for job execution.

.artifacts-definition: &artifacts-definition
    before_script:
        - rm -rf "${ARTIFACTS}"
        - (if [ -d "${CI_ARTIFACTS}" ]; then mv "${CI_ARTIFACTS}" "${ARTIFACTS}"; fi);
    after_script:
        - rm -rf "${CI_ARTIFACTS}"
        - (if [ -d "${ARTIFACTS}" ]; then mv "${ARTIFACTS}" "${CI_ARTIFACTS}"; fi);
    artifacts:
        expire_in: 30 mins
        paths:
            - ${CI_ARTIFACTS}
    tags:
        - linux



############################################################
##
##   build
##
############################################################

.build-qt: &build-qt
    stage: build
    <<: *artifacts-definition
    script:
        - ./build/age_ci.sh qt ${BUILD_TYPE}

build-qt-debug:
    <<: *build-qt
    variables:
        BUILD_TYPE: debug

build-qt-release:
    <<: *build-qt
    variables:
        BUILD_TYPE: release


build-wasm:
    stage: build
    <<: *artifacts-definition
    image: registry.gitlab.com/csprenger/docker-age-ci/wasm:latest
    script:
        - source "${REPO_EMSDK}/emsdk_env.sh"
        - ./build/age_ci.sh wasm Release



############################################################
##
##   test
##
############################################################

.test-release: &test-release
    stage: test
    dependencies:
        - build-qt-release
    tags:
        - linux

.test-debug: &test-debug
    stage: test
    dependencies:
        - build-qt-debug
    tags:
        - linux


.tests-mooneye: &tests-mooneye
    script:
        - ./build/age_ci.sh test mooneye "${GB_REPO_MOONEYE}/tests/build"

.tests-gambatte: &tests-gambatte
    script:
        - ./build/age_ci.sh test gambatte "${GB_REPO_GAMBATTE}/test/hwtests"


test-mooneye-release:
    <<: *test-release
    <<: *tests-mooneye

test-mooneye-debug:
    <<: *test-debug
    <<: *tests-mooneye


test-gambatte-release:
    <<: *test-release
    <<: *tests-gambatte

# gambatte tests run for longer than 10 minutes with the debug build
#test-gambatte-debug:
#    <<: *test-debug
#    <<: *tests-gambatte
